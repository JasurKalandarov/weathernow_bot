from aiogram import Router, types, F
from services.weather_service import get_weather, get_forecast_3days
from keyboards.forecast_kb import forecast_keyboard
from utils.state import user_languages, user_cities

router = Router()


@router.callback_query(F.data == "change_lang")
async def change_lang(callback: types.CallbackQuery):
    await callback.message.answer("üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞")
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city(callback: types.CallbackQuery):
    await callback.message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")
    await callback.answer()


@router.callback_query(F.data == "change_time")
async def change_time(callback: types.CallbackQuery):
    await callback.message.answer("‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    await callback.answer()


@router.callback_query(F.data == "enable_notifications")
async def enable_notifications(callback: types.CallbackQuery):
    await callback.message.answer("üîî –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!")
    await callback.answer()


@router.callback_query(F.data == "disable_notifications")
async def disable_notifications(callback: types.CallbackQuery):
    await callback.message.answer("üîï –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
    await callback.answer()


@router.callback_query(F.data == "back_to_forecast")
async def back_to_forecast(callback: types.CallbackQuery):
    await callback.message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥—ã üå¶Ô∏è")
    await callback.answer()


# --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
@router.callback_query(F.data == "forecast_today")
async def forecast_today(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    city = user_cities.get(callback.from_user.id)

    if not city:
        text = "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üåÜ" if lang == "ru" else "Avval shahar nomini yuboring üåÜ"
        await callback.message.answer(text)
        return

    try:
        await callback.message.delete()
    except:
        pass

    weather_info = await get_weather(city, lang)
    await callback.message.answer(weather_info, parse_mode="HTML")

    question_text = (
        "–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?" if lang == "ru"
        else "Qaysi prognozni olishni xohlaysiz?"
    )

    await callback.message.answer(
        f"<b>{question_text}</b>",
        parse_mode="HTML",
        reply_markup=forecast_keyboard(lang)
    )


# --- –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è ---
@router.callback_query(F.data == "forecast_3days")
async def forecast_3days(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    city = user_cities.get(callback.from_user.id)

    if not city:
        text = "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üåÜ" if lang == "ru" else "Avval shahar nomini yuboring üåÜ"
        await callback.message.answer(text)
        return

    try:
        await callback.message.delete()
    except:
        pass

    forecast_text = await get_forecast_3days(city, lang)
    await callback.message.answer(forecast_text, parse_mode="HTML")

    question_text = (
        "–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?" if lang == "ru"
        else "Qaysi prognozni olishni xohlaysiz?"
    )

    await callback.message.answer(
        f"<b>{question_text}</b>",
        parse_mode="HTML",
        reply_markup=forecast_keyboard(lang)
    )
