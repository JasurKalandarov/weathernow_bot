from aiogram import Router, types, F
from keyboards.language_kb import language_keyboard
from keyboards.forecast_kb import forecast_keyboard
from keyboards.settings_kb import settings_keyboard
from keyboards.notification_time_kb import notification_time_keyboard
from utils.state import user_languages, user_cities, user_notifications, persist_state

router = Router()


def build_settings_text(user_id: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = user_languages.get(user_id, "ru")
    city = user_cities.get(user_id, "‚Äî")
    notif = user_notifications.get(user_id, {"enabled": False, "hour": None})

    lang_text = "–†—É—Å—Å–∫–∏–π üá∑üá∫" if lang == "ru" else "O‚Äòzbek üá∫üáø"
    notif_text = f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {notif['hour']:02d}:00" if notif.get("enabled") else "–û—Ç–∫–ª—é—á–µ–Ω–∞"

    if lang == "ru":
        return (
            f"<b>‚öôÔ∏è –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            f"üåê –Ø–∑—ã–∫: {lang_text}\n"
            f"üèô –ì–æ—Ä–æ–¥: {city}\n"
            f"üîî –†–∞—Å—Å—ã–ª–∫–∞: {notif_text}"
        )
    else:
        return (
            f"<b>‚öôÔ∏è Joriy sozlamalaringiz:</b>\n\n"
            f"üåê Til: {lang_text}\n"
            f"üèô Shahar: {city}\n"
            f"üîî Xabarnoma: {notif_text}"
        )


# --- –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
@router.callback_query(F.data == "settings")
async def open_settings(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_languages.get(user_id, "ru")
    notif = user_notifications.get(user_id, {"enabled": False})

    await callback.message.edit_text(
        build_settings_text(user_id),
        parse_mode="HTML",
        reply_markup=settings_keyboard(lang, has_notifications=notif.get("enabled"))
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_languages.get(user_id, "ru")
    notif = user_notifications.get(user_id, {"enabled": False})

    await callback.message.edit_text(
        build_settings_text(user_id),
        parse_mode="HTML",
        reply_markup=settings_keyboard(lang, has_notifications=notif.get("enabled"))
    )
    await callback.answer()


# --- –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.callback_query(F.data == "enable_notifications")
async def enable_notifications(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    text = "üïì –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?" if lang == "ru" else "üïì Qachon ob-havo ma‚Äôlumotini olishni xohlaysiz?"
    await callback.message.edit_text(text, reply_markup=notification_time_keyboard())
    await callback.answer()


# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.callback_query(F.data.startswith("set_time_"))
async def set_notification_time(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_languages.get(user_id, "ru")

    selected_hour = int(callback.data.split("_")[2])
    user_notifications[user_id] = {"enabled": True, "hour": selected_hour}
    persist_state()

    try:
        await callback.message.delete()
    except:
        pass

    text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞! –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {selected_hour:02d}:00."
        if lang == "ru"
        else f"‚úÖ Xabarnoma yoqildi! Siz har kuni soat {selected_hour:02d}:00 da ob-havo ma‚Äôlumotini olasiz."
    )
    await callback.message.answer(text)

    await callback.message.answer(
        build_settings_text(user_id),
        parse_mode="HTML",
        reply_markup=settings_keyboard(lang, has_notifications=True)
    )
    await callback.answer()


# --- –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.callback_query(F.data == "change_time")
async def change_time(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    text = "üïì –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:" if lang == "ru" else "üïì Xabarnoma uchun yangi vaqtni tanlang:"
    await callback.message.edit_text(
        text,
        reply_markup=notification_time_keyboard(lang)
    )
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:" if lang == "ru" else "Yangi shahar nomini kiriting:"
    )

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text, reply_markup=None)
    await callback.answer()


# --- –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ---
@router.callback_query(F.data == "disable_notifications")
async def disable_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = user_languages.get(user_id, "ru")

    user_notifications[user_id] = {"enabled": False, "hour": None}
    persist_state()

    try:
        await callback.message.delete()
    except:
        pass

    text = "üîï –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞." if lang == "ru" else "üîï Xabarnoma o‚Äòchirildi."
    await callback.message.answer(text)

    await callback.message.answer(
        build_settings_text(user_id),
        parse_mode="HTML",
        reply_markup=settings_keyboard(lang, has_notifications=False)
    )
    await callback.answer()


# --- –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
@router.callback_query(F.data == "back_to_forecast")
async def back_to_menu(callback: types.CallbackQuery):
    lang = user_languages.get(callback.from_user.id, "ru")
    text = "–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?" if lang == "ru" else "Qaysi prognozni olishni xohlaysiz?"

    await callback.message.edit_text(
        f"<b>{text}</b>",
        parse_mode="HTML",
        reply_markup=forecast_keyboard(lang)
    )
    await callback.answer()


@router.callback_query(F.data == "change_lang")
async def change_language(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        reply_markup=language_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = callback.data.split("_")[1]
    user_languages[user_id] = lang
    persist_state()

    notif = user_notifications.get(user_id, {"enabled": False})
    await callback.message.edit_text(
        build_settings_text(user_id),
        parse_mode="HTML",
        reply_markup=settings_keyboard(lang, has_notifications=notif.get("enabled"))
    )
    await callback.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–†—É—Å—Å–∫–∏–π' if lang=='ru' else 'O‚Äòzbek'} ‚úÖ")
