import asyncio
import logging
from aiogram import Bot
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core.dispatcher import dp
from config import BOT_TOKEN
from services.scheduler import send_daily_forecasts

import handlers.start
import handlers.weather
import handlers.callbacks
import handlers.settings


async def on_startup(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    scheduler = AsyncIOScheduler()
    # –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
    scheduler.add_job(send_daily_forecasts, "cron", minute=0, args=[bot])
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")


async def start_bot():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    await on_startup(bot)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


# -----------------------------
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
# -----------------------------
async def handle(request):
    return web.Response(text="‚úÖ Bot is running")


async def run_web():
    app = web.Application()
    app.router.add_get("/", handle)
    port = 10000  # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    print(f"üåê Web server started on port {port}")


async def main():
    await asyncio.gather(start_bot(), run_web())


if __name__ == "__main__":
    asyncio.run(main())
